<%#
Copyright 2008-2013 Concur Technologies, Inc.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
%>
<% language_tabs = current_page.data.language_tabs || [] %>
<% page_content = yield %>
<%
  if current_page.data.includes
    current_page.data.includes.each do |include|
      page_content += partial("includes/#{include}")
    end
  end
%>

<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <%= stylesheet_link_tag "screen", media: :screen %>
  <% if current_page.data.key?('meta') %>
    <% current_page.data.meta.each do |meta| %>
      <meta
        <% meta.each do |key, value| %>
          <%= "#{key}=\"#{value}\"" %>
        <% end %>
      >
    <% end %>
  <% end %>
  <title><%= current_page.data.title || "Sonatype API Documentation" %></title>

  <style media="screen">
    <%= Rouge::Themes::MonokaiSublimeSlate.render(:scope => '.highlight') %>
  </style>
  <style media="print">
    * {
      transition:none!important;
    }
    <%= Rouge::Themes::Base16::Solarized.render(:scope => '.highlight') %>
  </style>
  <%= stylesheet_link_tag :screen, media: :screen %>
  <%= stylesheet_link_tag :print, media: :print %>
  <% if current_page.data.search %>
    <%= javascript_include_tag  "all" %>
  <% else %>
    <%= javascript_include_tag  "all_nosearch" %>
  <% end %>

  <% if current_page.data.code_clipboard %>
  <script>
    $(function() { setupCodeCopy(); });
  </script>
  <% end %>
</head>

<body class="<%= page_classes %>" data-languages="<%=h language_tabs.map{ |lang| lang.is_a?(Hash) ? lang.keys.first : lang }.to_json %>">

<div class="logo-container">
  <div class="logo"><%= image_tag('logo.png') %> </div>
</div>

<a href="#" id="nav-button">
      <span>
        NAV
        <%= image_tag('navbar.png') %>
      </span>
</a>

<div class="toc-wrapper">
  <% if language_tabs.any? %>
    <div class="lang-selector">
      <% language_tabs.each do |lang| %>
        <% if lang.is_a? Hash %>
          <a href="#" data-language-name="<%= lang.keys.first %>"><%= lang.values.first %></a>
        <% else %>
          <a href="#" data-language-name="<%= lang %>"><%= lang %></a>
        <% end %>
      <% end %>
    </div>
  <% end %>
  <% if current_page.data.search %>
    <div class="search">
      <input type="text" class="search" id="input-search" placeholder="Search">
    </div>
    <ul class="search-results"></ul>
  <% end %>
  
  
  <div class="nx-dropdown">
    <button id="product-select" class="nx-dropdown__toggle">
      <span class="nx-dropdown__arrow"></span>
    </button>
    <ul class="nx-dropdown__menu" id="product-options">
      <% Dir.glob('source/platform/*').select { |f| File.directory? f }.each do |product_dir| %>
        <li class="nx-dropdown__item" data-value="<%= File.basename(product_dir) %>"><%= File.basename(product_dir) %></li>
      <% end %>
    </ul>
  </div>

  <div class="nx-dropdown">
    <button id="version-select" class="nx-dropdown__toggle">
      <span class="nx-dropdown__arrow"></span>
    </button>
    <ul class="nx-dropdown__menu" id="version-options"></ul>
  </div>

  <div class="divider">
  </div>

  <ul id="toc" class="toc-list-h1">
    <% toc_data(page_content).each do |h1| %>
      <li>
        <a href="#<%= h1[:id] %>" class="toc-h1 toc-link" data-title="<%= h1[:title] %>"><%= h1[:content] %></a>
        <% if h1[:children].length > 0 %>
          <ul class="toc-list-h2">
            <% h1[:children].each do |h2| %>
              <li>
                <a href="#<%= h2[:id] %>" class="toc-h2 toc-link" data-title="<%= h2[:title] %>"><%= h2[:content] %></a>
              </li>
            <% end %>
          </ul>
        <% end %>
      </li>
    <% end %>
  </ul>
  <% if current_page.data.toc_footers %>
    <ul class="toc-footer">
      <% current_page.data.toc_footers.each do |footer| %>
        <li><%= footer %></li>
      <% end %>
    </ul>
  <% end %>
</div>

<div class="page-wrapper">
  <div class="dark-box"></div>
  <div class="content">
    <%= page_content %>
  </div>
  <div class="dark-box">
    <% if language_tabs.any? %>
      <div class="lang-selector">
        <% language_tabs.each do |lang| %>
          <% if lang.is_a? Hash %>
            <a href="#" data-language-name="<%= lang.keys.first %>"><%= lang.values.first %></a>
          <% else %>
            <a href="#" data-language-name="<%= lang %>"><%= lang %></a>
          <% end %>
        <% end %>
      </div>
    <% end %>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // ----- 1) Grab Middleman prefix -----
    // In dev, config[:http_prefix] is typically ""
    // In production, e.g. "/slate"
    const prefix = "<%= config[:http_prefix] %>";

    /**
     * Joins the prefix (like "/slate") and a path (like "/platform/Lifecycle...")
     * into a clean URL without double slashes, e.g. "/slate/platform/Lifecycle..."
     *
     * Examples:
     *   prefix = "/slate", path = "/platform/Lifecycle" => "/slate/platform/Lifecycle"
     *   prefix = "", path = "/platform/Lifecycle"       => "/platform/Lifecycle"
     */
    function joinPrefixAndPath(prefix, path) {
      // Remove trailing slashes from prefix
      const trimmedPrefix = prefix.replace(/\/+$/, "");
      // Remove leading slashes from path
      const trimmedPath = path.replace(/^\/+/, "");
      // Combine with exactly one slash in between
      return `${trimmedPrefix}/${trimmedPath}`;
    }

    // ----- DOM Elements -----
    const productButton = document.getElementById('product-select');
    const productOptions = document.getElementById('product-options');
    const versionButton = document.getElementById('version-select');
    const versionOptions = document.getElementById('version-options');

    // Your default product if none is in the URL
    const defaultProduct = 'Lifecycle';

    // Hide both dropdowns on initial load
    productOptions.style.display = 'none';
    versionOptions.style.display = 'none';

    // ========== Helper Functions ==========

    // Toggle show/hide for a dropdown
    function toggleDropdown(button, options) {
      const isOpen = options.style.display === 'block';
      options.style.display = isOpen ? 'none' : 'block';
      button.classList.toggle('open', !isOpen);
    }

    // Strip out the arrow <span> from the HTML, leaving just the text
    function stripArrowText(html) {
      return html.replace(/<span.*<\/span>/, '').trim();
    }

    function removeSelectedProductOption(selectedProduct) {
      productOptions.querySelectorAll('.nx-dropdown__item').forEach((li) => {
        if (li.dataset.value === selectedProduct) {
          li.remove();
        } else {
          li.style.display = '';
        }
      });
    }

    function removeSelectedVersionOption(selectedVersion) {
      versionOptions.querySelectorAll('.nx-dropdown__item').forEach((li) => {
        if (li.dataset.value === selectedVersion) {
          li.remove();
        } else {
          li.style.display = '';
        }
      });
    }

    // ========== URL Parsing ==========

    // We expect a URL like /slate/platform/<PRODUCT>/<VERSION>/index.html
    // so let's remove /slate (the prefix) and then remove 'platform'
    // to get product & version.
    function getPartsFromURL() {
      let path = window.location.pathname;

      // If there's a prefix (like "/slate"), remove it
      if (prefix && path.startsWith(prefix)) {
        path = path.slice(prefix.length);
      }

      // Split the remainder on '/'
      const parts = path.split('/').filter(Boolean);

      // If the first segment is literally "platform", remove it
      if (parts[0] === 'platform') {
        parts.shift();  // now parts[0] -> product, parts[1] -> version
      }

      const product = decodeURIComponent(parts[0] || '');
      const version = decodeURIComponent(parts[1] || '');
      return { product, version };
    }

    // Build/populate the version dropdown
    // We know versions.json lives at /platform/<PRODUCT>/versions.json
    function populateVersions(product, activeVersion = null) {
      if (!product) return;

      const versionsJsonPath = joinPrefixAndPath(
        prefix,
        `/platform/${encodeURIComponent(product)}/versions.json`
      );

      fetch(versionsJsonPath)
        .then((response) => response.json())
        .then((versions) => {
          versionOptions.innerHTML = ''; // Clear old items

          versions.forEach((ver) => {
            const li = document.createElement('li');
            li.className = 'nx-dropdown__item';
            li.dataset.value = ver;
            li.textContent = ver;
            versionOptions.appendChild(li);

            // Clicking a version => update the UI & redirect
            li.addEventListener('click', (event) => {
              event.stopPropagation();
              versionButton.innerHTML = `
                ${ver}
                <span class="nx-dropdown__arrow"></span>
              `;
              versionOptions.style.display = 'none';
              versionButton.classList.remove('open');

              // e.g. /slate/platform/<PRODUCT>/<VERSION>/index.html
              window.location.href = joinPrefixAndPath(
                prefix,
                `/platform/${encodeURIComponent(product)}/${encodeURIComponent(ver)}/index.html`
              );
            });
          });

          // Show the active version in the button, or default to the first
          if (activeVersion && versions.includes(activeVersion)) {
            versionButton.innerHTML = `
              ${activeVersion}
              <span class="nx-dropdown__arrow"></span>
            `;
          } else if (versions.length > 0) {
            versionButton.innerHTML = `
              ${versions[0]}
              <span class="nx-dropdown__arrow"></span>
            `;
          }

          // Remove the "current" version from the list
          const currentVersion = stripArrowText(versionButton.innerHTML);
          if (currentVersion) {
            removeSelectedVersionOption(currentVersion);
          }
        })
        .catch((error) => {
          console.error(`Error populating versions for product "${product}":`, error);
        });
    }

    // ========== Event Handlers for Dropdowns ==========

    // Toggle product dropdown
    productButton.addEventListener('click', (event) => {
      event.stopPropagation();
      toggleDropdown(productButton, productOptions);
    });

    // Toggle version dropdown
    versionButton.addEventListener('click', (event) => {
      event.stopPropagation();
      toggleDropdown(versionButton, versionOptions);
    });

    // Close dropdowns if user clicks outside them
    document.addEventListener('click', () => {
      productOptions.style.display = 'none';
      productButton.classList.remove('open');
      versionOptions.style.display = 'none';
      versionButton.classList.remove('open');
    });

    // When user selects a product from the dropdown:
    productOptions.querySelectorAll('.nx-dropdown__item').forEach((li) => {
      li.addEventListener('click', (event) => {
        event.stopPropagation();
        const selectedProduct = li.dataset.value;

        productButton.innerHTML = `
          ${selectedProduct}
          <span class="nx-dropdown__arrow"></span>
        `;
        productOptions.style.display = 'none';
        productButton.classList.remove('open');

        // Immediately fetch versions => redirect to the first version
        const productVersionsPath = joinPrefixAndPath(
          prefix,
          `/platform/${encodeURIComponent(selectedProduct)}/versions.json`
        );

        fetch(productVersionsPath)
          .then((res) => res.json())
          .then((versions) => {
            if (versions.length > 0) {
              const latestVer = versions[0];
              versionButton.innerHTML = `
                ${latestVer}
                <span class="nx-dropdown__arrow"></span>
              `;
              window.location.href = joinPrefixAndPath(
                prefix,
                `/platform/${encodeURIComponent(selectedProduct)}/${encodeURIComponent(latestVer)}/index.html`
              );
            } else {
              console.warn(`No versions found for product "${selectedProduct}".`);
            }
          })
          .catch((error) => {
            console.error('Error fetching versions:', error);
          });
      });
    });

    // When user selects a version from the dropdown:
    versionOptions.querySelectorAll('.nx-dropdown__item').forEach((li) => {
      li.addEventListener('click', (event) => {
        event.stopPropagation();
        const selectedVersion = li.dataset.value;
        versionButton.innerHTML = `
          ${selectedVersion}
          <span class="nx-dropdown__arrow"></span>
        `;
        versionOptions.style.display = 'none';
        versionButton.classList.remove('open');

        const currentProduct = stripArrowText(productButton.innerHTML);
        if (currentProduct && selectedVersion) {
          window.location.href = joinPrefixAndPath(
            prefix,
            `/platform/${encodeURIComponent(currentProduct)}/${encodeURIComponent(selectedVersion)}/index.html`
          );
        }
      });
    });

    // ========== On Page Load ==========

    // Check if the URL includes /platform/<PRODUCT>/<VERSION>
    const { product, version } = getPartsFromURL();

    if (product) {
      productButton.innerHTML = `
        ${product}
        <span class="nx-dropdown__arrow"></span>
      `;
      removeSelectedProductOption(product);
      populateVersions(product, version);
    } else {
      // If no product in URL, default to "Lifecycle" => auto-redirect
      const defaultVersionsPath = joinPrefixAndPath(
        prefix,
        `/platform/${encodeURIComponent(defaultProduct)}/versions.json`
      );

      fetch(defaultVersionsPath)
        .then((res) => res.json())
        .then((versions) => {
          if (versions.length > 0) {
            const latestVer = versions[0];
            window.location.href = joinPrefixAndPath(
              prefix,
              `/platform/${encodeURIComponent(defaultProduct)}/${encodeURIComponent(latestVer)}/index.html`
            );
          } else {
            console.warn(`No versions found for default product: ${defaultProduct}`);
          }
        })
        .catch((error) => {
          console.error(`Error fetching versions for default product (${defaultProduct}):`, error);
        });
    }
  });
</script>
</body>
</html>